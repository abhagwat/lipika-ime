LipikaIME a user-configurable phonetic Input Method Engine for Mac OS X.
Copyright (C) 2013 Ranganath Atreya

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

This program comes with ABSOLUTELY NO WARRANTY; see LICENSE.TXT.

Lipika IME is a many-to-many, user configurable, phonetic, input method engine. Originally, designed to type Sanskrit using Devanagari on a Mac. It can be configured to work with any other Indo-European language of similar structure.

Lipika IME understands Google IME cannonical scheme format: http://www.google.com/inputtools/windows/canonical.html
Schemes are in LipikaIME/Contents/Resources/Schemes directory. Barahavat.scm comes built-in.

The configuration file consists of the following:
1. Headers
2. Simple mappings (without using classes)
3. Class definitions
4. Class mappings (using class and wildcard)

The configuration file is ultimately parsed into a main parse tree. Classes are treated as named parse trees that can be appended to any node of the main parse tree by creating class mappings. User inputs move the algorithm through the parse tree. Some nodes may produce output. Subsequent outputs in the same path through the tree will replace previous output until you reach a leaf at which point the output is finalized. Stop character and white spaces also finalize previous outputs.

Contriants of the current version include:
1. Support for only one class and wildcard per mapping. That is, you cannot chain multiple classes within the same mapping. You can however achieve the same result by nested class mappings. In other words, using class mappings within class definitions.
2. Class mapping has to always be a suffix of the mapping key. This is a logical extension of using classes as named parse trees that get appended to the main parse tree. You can only append named parse trees as leaf trees.
3. (Bug) You cannot use the @ symbol. It currently trips up NSMutableDictionary.

TODO:
1. Need a logging manager that can be configured to dial up logging and default to loggin only errors.
2. Use candidate window to show inflight output and annotations for inflight input
3. Add ability to choose different schemes at runtime and save default choice
